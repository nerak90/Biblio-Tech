// Archivo: pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <groupId>com.catalogo</groupId>
    <artifactId>catalogo-libros</artifactId>
    <version>1.0-SNAPSHOT</version>
    
    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    
    <dependencies>
        <!-- Jackson para JSON -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.15.2</version>
        </dependency>
        
        <!-- H2 Database para persistencia -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>2.2.220</version>
        </dependency>
        
        <!-- Apache HttpClient para API calls -->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.14</version>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>11</source>
                    <target>11</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

// Archivo: src/main/java/com/catalogo/modelo/Libro.java
package com.catalogo.modelo;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

@JsonIgnoreProperties(ignoreUnknown = true)
public class Libro {
    private String id;
    private String titulo;
    private String autor;
    private String idioma;
    private Integer numeroDescargas;
    
    // Constructor vacío
    public Libro() {}
    
    // Constructor completo
    public Libro(String id, String titulo, String autor, String idioma, Integer numeroDescargas) {
        this.id = id;
        this.titulo = titulo;
        this.autor = autor;
        this.idioma = idioma;
        this.numeroDescargas = numeroDescargas;
    }
    
    // Getters y Setters
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }
    
    public String getTitulo() { return titulo; }
    public void setTitulo(String titulo) { this.titulo = titulo; }
    
    public String getAutor() { return autor; }
    public void setAutor(String autor) { this.autor = autor; }
    
    public String getIdioma() { return idioma; }
    public void setIdioma(String idioma) { this.idioma = idioma; }
    
    @JsonProperty("download_count")
    public Integer getNumeroDescargas() { return numeroDescargas; }
    public void setNumeroDescargas(Integer numeroDescargas) { this.numeroDescargas = numeroDescargas; }
    
    @Override
    public String toString() {
        return String.format("""
            ┌─────────────────────────────────────────────────────────────┐
            │ ID: %-55s │
            │ Título: %-51s │
            │ Autor: %-52s │
            │ Idioma: %-51s │
            │ Descargas: %-47s │
            └─────────────────────────────────────────────────────────────┘
            """, 
            id != null ? id : "N/A",
            titulo != null ? titulo : "N/A",
            autor != null ? autor : "N/A", 
            idioma != null ? idioma : "N/A",
            numeroDescargas != null ? numeroDescargas.toString() : "N/A");
    }
}

// Archivo: src/main/java/com/catalogo/modelo/RespuestaAPI.java
package com.catalogo.modelo;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

@JsonIgnoreProperties(ignoreUnknown = true)
public class RespuestaAPI {
    @JsonProperty("count")
    private int totalResultados;
    
    @JsonProperty("results")
    private List<LibroAPI> libros;
    
    // Getters y Setters
    public int getTotalResultados() { return totalResultados; }
    public void setTotalResultados(int totalResultados) { this.totalResultados = totalResultados; }
    
    public List<LibroAPI> getLibros() { return libros; }
    public void setLibros(List<LibroAPI> libros) { this.libros = libros; }
}

// Archivo: src/main/java/com/catalogo/modelo/LibroAPI.java
package com.catalogo.modelo;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

@JsonIgnoreProperties(ignoreUnknown = true)
public class LibroAPI {
    @JsonProperty("id")
    private Integer id;
    
    @JsonProperty("title")
    private String titulo;
    
    @JsonProperty("authors")
    private List<Autor> autores;
    
    @JsonProperty("languages")
    private List<String> idiomas;
    
    @JsonProperty("download_count")
    private Integer numeroDescargas;
    
    // Métodos para convertir a nuestro modelo interno
    public Libro convertirALibro() {
        String autorPrincipal = (autores != null && !autores.isEmpty()) 
            ? autores.get(0).getNombre() 
            : "Autor desconocido";
        
        String idiomaPrincipal = (idiomas != null && !idiomas.isEmpty()) 
            ? idiomas.get(0) 
            : "Desconocido";
            
        return new Libro(
            id != null ? id.toString() : "0",
            titulo != null ? titulo : "Título desconocido",
            autorPrincipal,
            idiomaPrincipal,
            numeroDescargas != null ? numeroDescargas : 0
        );
    }
    
    // Getters y Setters
    public Integer getId() { return id; }
    public void setId(Integer id) { this.id = id; }
    
    public String getTitulo() { return titulo; }
    public void setTitulo(String titulo) { this.titulo = titulo; }
    
    public List<Autor> getAutores() { return autores; }
    public void setAutores(List<Autor> autores) { this.autores = autores; }
    
    public List<String> getIdiomas() { return idiomas; }
    public void setIdiomas(List<String> idiomas) { this.idiomas = idiomas; }
    
    public Integer getNumeroDescargas() { return numeroDescargas; }
    public void setNumeroDescargas(Integer numeroDescargas) { this.numeroDescargas = numeroDescargas; }
    
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static class Autor {
        @JsonProperty("name")
        private String nombre;
        
        public String getNombre() { return nombre; }
        public void setNombre(String nombre) { this.nombre = nombre; }
    }
}

// Archivo: src/main/java/com/catalogo/servicio/ApiService.java
package com.catalogo.servicio;

import com.catalogo.modelo.Libro;
import com.catalogo.modelo.RespuestaAPI;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.util.EntityUtils;

import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.stream.Collectors;

public class ApiService {
    private static final String BASE_URL = "https://gutendex.com/books/";
    private final HttpClient httpClient;
    private final ObjectMapper objectMapper;
    
    public ApiService() {
        this.httpClient = HttpClientBuilder.create().build();
        this.objectMapper = new ObjectMapper();
    }
    
    public List<Libro> buscarLibrosPorTitulo(String titulo) {
        try {
            String tituloEncoded = URLEncoder.encode(titulo, StandardCharsets.UTF_8);
            String url = BASE_URL + "?search=" + tituloEncoded;
            
            System.out.println("🔍 Buscando en: " + url);
            
            HttpGet request = new HttpGet(url);
            HttpResponse response = httpClient.execute(request);
            
            if (response.getStatusLine().getStatusCode() == 200) {
                String jsonResponse = EntityUtils.toString(response.getEntity());
                RespuestaAPI respuesta = objectMapper.readValue(jsonResponse, RespuestaAPI.class);
                
                return respuesta.getLibros().stream()
                    .map(libroAPI -> libroAPI.convertirALibro())
                    .collect(Collectors.toList());
            } else {
                System.err.println("❌ Error en la API: " + response.getStatusLine().getStatusCode());
                return List.of();
            }
        } catch (IOException e) {
            System.err.println("❌ Error de conexión: " + e.getMessage());
            return List.of();
        }
    }
    
    public List<Libro> obtenerLibrosPopulares() {
        try {
            String url = BASE_URL + "?ordering=-download_count&page_size=10";
            
            HttpGet request = new HttpGet(url);
            HttpResponse response = httpClient.execute(request);
            
            if (response.getStatusLine().getStatusCode() == 200) {
                String jsonResponse = EntityUtils.toString(response.getEntity());
                RespuestaAPI respuesta = objectMapper.readValue(jsonResponse, RespuestaAPI.class);
                
                return respuesta.getLibros().stream()
                    .map(libroAPI -> libroAPI.convertirALibro())
                    .collect(Collectors.toList());
            }
        } catch (IOException e) {
            System.err.println("❌ Error obteniendo libros populares: " + e.getMessage());
        }
        return List.of();
    }
    
    public List<Libro> buscarLibrosPorIdioma(String idioma) {
        try {
            String url = BASE_URL + "?languages=" + idioma;
            
            HttpGet request = new HttpGet(url);
            HttpResponse response = httpClient.execute(request);
            
            if (response.getStatusLine().getStatusCode() == 200) {
                String jsonResponse = EntityUtils.toString(response.getEntity());
                RespuestaAPI respuesta = objectMapper.readValue(jsonResponse, RespuestaAPI.class);
                
                return respuesta.getLibros().stream()
                    .map(libroAPI -> libroAPI.convertirALibro())
                    .limit(10)
                    .collect(Collectors.toList());
            }
        } catch (IOException e) {
            System.err.println("❌ Error buscando por idioma: " + e.getMessage());
        }
        return List.of();
    }
}

// Archivo: src/main/java/com/catalogo/repositorio/LibroRepositorio.java
package com.catalogo.repositorio;

import com.catalogo.modelo.Libro;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class LibroRepositorio {
    private static final String DB_URL = "jdbc:h2:mem:catalogodb;DB_CLOSE_DELAY=-1";
    private static final String DB_USER = "sa";
    private static final String DB_PASSWORD = "";
    
    public LibroRepositorio() {
        inicializarBaseDatos();
    }
    
    private void inicializarBaseDatos() {
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            String createTable = """
                CREATE TABLE IF NOT EXISTS libros (
                    id VARCHAR(50) PRIMARY KEY,
                    titulo VARCHAR(500) NOT NULL,
                    autor VARCHAR(200),
                    idioma VARCHAR(50),
                    numero_descargas INTEGER,
                    fecha_guardado TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
                """;
            
            try (PreparedStatement stmt = conn.prepareStatement(createTable)) {
                stmt.execute();
                System.out.println("✅ Base de datos inicializada correctamente");
            }
        } catch (SQLException e) {
            System.err.println("❌ Error inicializando base de datos: " + e.getMessage());
        }
    }
    
    public boolean guardarLibro(Libro libro) {
        String sql = """
            INSERT INTO libros (id, titulo, autor, idioma, numero_descargas) 
            VALUES (?, ?, ?, ?, ?) 
            ON DUPLICATE KEY UPDATE 
            titulo = VALUES(titulo),
            autor = VALUES(autor),
            idioma = VALUES(idioma),
            numero_descargas = VALUES(numero_descargas)
            """;
            
        // Para H2 usamos MERGE
        String sqlH2 = """
            MERGE INTO libros (id, titulo, autor, idioma, numero_descargas) 
            VALUES (?, ?, ?, ?, ?)
            """;
        
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sqlH2)) {
            
            stmt.setString(1, libro.getId());
            stmt.setString(2, libro.getTitulo());
            stmt.setString(3, libro.getAutor());
            stmt.setString(4, libro.getIdioma());
            stmt.setInt(5, libro.getNumeroDescargas() != null ? libro.getNumeroDescargas() : 0);
            
            int rowsAffected = stmt.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            System.err.println("❌ Error guardando libro: " + e.getMessage());
            return false;
        }
    }
    
    public List<Libro> obtenerTodosLosLibros() {
        List<Libro> libros = new ArrayList<>();
        String sql = "SELECT * FROM libros ORDER BY fecha_guardado DESC";
        
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            
            while (rs.next()) {
                Libro libro = new Libro(
                    rs.getString("id"),
                    rs.getString("titulo"),
                    rs.getString("autor"),
                    rs.getString("idioma"),
                    rs.getInt("numero_descargas")
                );
                libros.add(libro);
            }
        } catch (SQLException e) {
            System.err.println("❌ Error obteniendo libros: " + e.getMessage());
        }
        
        return libros;
    }
    
    public List<Libro> buscarLibrosPorAutor(String autor) {
        List<Libro> libros = new ArrayList<>();
        String sql = "SELECT * FROM libros WHERE UPPER(autor) LIKE UPPER(?) ORDER BY titulo";
        
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            
            stmt.setString(1, "%" + autor + "%");
            
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Libro libro = new Libro(
                        rs.getString("id"),
                        rs.getString("titulo"),
                        rs.getString("autor"),
                        rs.getString("idioma"),
                        rs.getInt("numero_descargas")
                    );
                    libros.add(libro);
                }
            }
        } catch (SQLException e) {
            System.err.println("❌ Error buscando libros por autor: " + e.getMessage());
        }
        
        return libros;
    }
    
    public int contarLibrosGuardados() {
        String sql = "SELECT COUNT(*) FROM libros";
        
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            
            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (SQLException e) {
            System.err.println("❌ Error contando libros: " + e.getMessage());
        }
        
        return 0;
    }
}

// Archivo: src/main/java/com/catalogo/CatalogoLibros.java
package com.catalogo;

import com.catalogo.modelo.Libro;
import com.catalogo.repositorio.LibroRepositorio;
import com.catalogo.servicio.ApiService;

import java.util.List;
import java.util.Scanner;

public class CatalogoLibros {
    private final Scanner scanner;
    private final ApiService apiService;
    private final LibroRepositorio repositorio;
    
    public CatalogoLibros() {
        this.scanner = new Scanner(System.in);
        this.apiService = new ApiService();
        this.repositorio = new LibroRepositorio();
    }
    
    public void iniciar() {
        mostrarBienvenida();
        
        int opcion;
        do {
            mostrarMenu();
            opcion = leerOpcion();
            
            switch (opcion) {
                case 1 -> buscarLibrosPorTitulo();
                case 2 -> mostrarLibrosPopulares();
                case 3 -> buscarLibrosPorIdioma();
                case 4 -> mostrarLibrosGuardados();
                case 5 -> buscarEnLibrosGuardados();
                case 6 -> mostrarEstadisticas();
                case 0 -> mostrarDespedida();
                default -> System.out.println("❌ Opción no válida. Por favor, intente nuevamente.");
            }
            
            if (opcion != 0) {
                esperarContinuar();
            }
        } while (opcion != 0);
        
        scanner.close();
    }
    
    private void mostrarBienvenida() {
        System.out.println("""
            
            ╔════════════════════════════════════════════════════════════════╗
            ║                    📚 BIBLIO TECH  📚                    ║
            ║                                                                ║
            ║        ¡Bienvenido al mejor catálogo de libros digital!       ║
            ║           Explora miles de libros de dominio público          ║
            ╚════════════════════════════════════════════════════════════════╝
            """);
    }
    
    private void mostrarMenu() {
        System.out.println("""
            
            ┌─────────────────── MENÚ PRINCIPAL ───────────────────┐
            │                                                      │
            │  1️⃣  Buscar libros por título                        │
            │  2️⃣  Ver libros más populares                        │
            │  3️⃣  Buscar libros por idioma                        │
            │  4️⃣  Ver libros guardados                            │
            │  5️⃣  Buscar en libros guardados                      │
            │  6️⃣  Ver estadísticas                                │
            │  0️⃣  Salir                                           │
            │                                                      │
            └──────────────────────────────────────────────────────┘
            """);
        System.out.print("👉 Seleccione una opción: ");
    }
    
    private int leerOpcion() {
        try {
            return Integer.parseInt(scanner.nextLine().trim());
        } catch (NumberFormatException e) {
            return -1;
        }
    }
    
    private void buscarLibrosPorTitulo() {
        System.out.println("\n🔍 BÚSQUEDA POR TÍTULO");
        System.out.println("─".repeat(50));
        System.out.print("Ingrese el título del libro: ");
        String titulo = scanner.nextLine().trim();
        
        if (titulo.isEmpty()) {
            System.out.println("❌ Debe ingresar un título válido.");
            return;
        }
        
        System.out.println("\n⏳ Buscando libros...");
        List<Libro> libros = apiService.buscarLibrosPorTitulo(titulo);
 
